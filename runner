#! /usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

class Runner
  def call(argv)
    failed = false
    @name, *cmds = parser.parse!(argv)
    cmd = cmds.join(' ')

    problems.each do |problem_name|
      i = in_path(problem_name)
      o = out_path(problem_name)
      c = "cat #{i} | timeout #{timeout} #{cmd} | diff - #{o}"
      unless system(c, { out: '/dev/null', err: '/dev/null' })
        failed = true
        puts "Failed: #{c}"
        if fail_fast?
          break
        end
      end
    end

    if failed
      exit 1
    else
      exit 0
    end
  end

  private

  def timeout
    @timeout ||= '2s'
  end

  def base_dir
    @base_dir ||= Dir.pwd
  end

  def problems
    @problems ||= Dir["#{in_dir}/*"].map { |e| File.basename(e) }
  end

  def in_path(name)
    "#{in_dir}/#{name}"
  end

  def in_dir
    File.expand_path("#{@name}/in", base_dir)
  end

  def out_path(name)
    "#{out_dir}/#{name}"
  end

  def out_dir
    File.expand_path("#{@name}/out/", base_dir)
  end

  def parser
    @parser ||= OptionParser.new do |parser|
      parser.banner = "runner [OPTIONS] PROBLEM -- COMMAND"
      parser.on('--fail-fast', 'if specified, exit immediately after a failure happens') { @fail_fast = true }
      parser.on('-d DIR', '--dir DIR', 'dir of testcases. For example, $DIR/$PROBLEM/in/sample1.txt. Default: $PWD') do |e|
        @base_dir = e
      end
      parser.on('-t TIMEOUT', '--timeout TIMEOUT', 'timeout value, default: 2s') { |e| @timeout = e }
    end
  end

  def fail_fast?
    @fail_fast
  end
end

Runner.new.call(ARGV)
